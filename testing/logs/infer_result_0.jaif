package units.qual:
  annotation @BaseUnit:
    int exponent
    String unit
    int prefix

package units.qual:
  annotation @UnitsInternal:
    String originalName
    boolean unknownUnits
    boolean unitsBottom
    int prefixExponent
    annotation-field BaseUnit[] baseUnits

package units.qual:
  annotation @UnknownUnits:

package units.qual:
  annotation @PolyUnit:

package org.checkerframework.framework.qual:
  annotation @PolyAll:

package units.qual:
  annotation @UnitsBottom:

package org.jblas:
class FloatMatrix$ColumnsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method get(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method convertToFloatMatrix()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas:
class Decompose$LUDecomposition:
method <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V:

package org.jblas.org.jblas:
class DoubleMatrix$RowsAsListView:@units.qual.UnitsBottom
package org.jblas.ranges:
class IndicesRange:
field counter:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field indices:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsBottom

method length()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method hasMore()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method init(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method next()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method value()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>([I)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method index()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits

method <init>(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas:
class DoubleMatrix$ColumnsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method convertToDoubleMatrix()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.exceptions.org.jblas.exceptions:
class LapackPositivityException:@units.qual.UnitsBottom
package org.jblas.exceptions:
class LapackException:
method <init>(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Ljava/lang/String;Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom

package org.jblas.ranges.org.jblas.ranges:
class IntervalRange:@units.qual.UnitsBottom
package org.jblas.ranges:
class RangeUtils:
method all()Lorg/jblas/ranges/Range;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method indices(Lorg/jblas/DoubleMatrix;)Lorg/jblas/ranges/Range;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method point(I)Lorg/jblas/ranges/Range;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method indices([I)Lorg/jblas/ranges/Range;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method find(Lorg/jblas/DoubleMatrix;)Lorg/jblas/ranges/Range;:
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method interval(II)Lorg/jblas/ranges/Range;:
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas:
class Eigen:
field dummyDouble:
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field dummyFloat:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method symmetricGeneralizedEigenvalues(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 8, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 9, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvectors(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method symmetricEigenvalues(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method symmetricGeneralizedEigenvectors(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;DD)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvalues(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;DD)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvalues(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvectors(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method symmetricEigenvectors(Lorg/jblas/DoubleMatrix;)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Return.expression, NewArray.type 1: @units.qual.UnitsBottom

method symmetricEigenvectors(Lorg/jblas/FloatMatrix;)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eigenvectors(Lorg/jblas/FloatMatrix;)[Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.argument 1, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method eigenvalues(Lorg/jblas/DoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method symmetricEigenvalues(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvalues(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvectors(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;II)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 14, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 8, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 9, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom

method eigenvectors(Lorg/jblas/DoubleMatrix;)[Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.argument 1, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvalues(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 8, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 9, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method eigenvalues(Lorg/jblas/FloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvectors(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;FF)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvectors(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;II)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 14, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 9, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 13, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 8, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method symmetricGeneralizedEigenvalues(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;FF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 0, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom

package org.jblas:
class DoubleMatrix$1:
method compare(Ljava/lang/Object;Ljava/lang/Object;)I:
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.elseStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas:
class NativeBlasLibraryLoader:
method loadDependentLibraries()V:
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method loadLibraryAndCheckErrors()V:
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.methodSelect, MemberSelect.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 1, Catch.parameter, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 0, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 2, If.elseStatement, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom

package org.jblas.exceptions:
class LapackPositivityException:
method <init>(Ljava/lang/String;Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.ranges:
class IntervalRange:
field value:
insert-annotation Variable.type: @units.qual.UnitsBottom

field end:
insert-annotation Variable.type: @units.qual.UnitsBottom

field start:
insert-annotation Variable.type: @units.qual.UnitsBottom

method length()I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method init(II)V:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom

method hasMore()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method value()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method next()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method index()I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas.exceptions:
class LapackConvergenceException:
insert-annotation Class.bound -1: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.util.org.jblas.util:
class LibraryLoader$2:@units.qual.UnitsBottom
package org.jblas.util:
class SanityChecks:
field checksFailed:
insert-annotation Variable.type: @units.qual.UnitsBottom

method checkComplexReturnValues()V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method printSummary()V:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method checkGeneralizedEigenvalues()V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 5: @units.qual.UnitsBottom

method checkEigenvalues()V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method main([Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 1, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsBottom

method checkSVD()V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3, NewArray.initializer 1, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3, NewArray.initializer 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 3, NewArray.initializer 2, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method checkMatrixMultiplication()V:
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 2, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0, NewArray.initializer 1, NewArray.initializer 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0, NewArray.initializer 0, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method checkXerbla()V:
insert-annotation Method.body, Block.statement 2, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Try.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom

method check(Ljava/lang/String;Z)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method checkVectorAddition()V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 2: @units.qual.UnitsBottom

package org.jblas:
class DoubleMatrix$RowsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method convertToDoubleMatrix()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class DoubleMatrix$1:@units.qual.UnitsBottom
package org.jblas.util.org.jblas.util:
class LibraryLoader$1:@units.qual.UnitsBottom
package org.jblas.util.org.jblas.util:
class LibraryLoader:@units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
package org.jblas:
class DoubleMatrix:
field rows:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field length:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field columns:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field serialVersionUID:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

field data:
insert-annotation Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field EMPTY:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method divi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(ILorg/jblas/DoubleMatrix;D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method get(ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method isSquare()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method concatHorizontally(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method lei(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method nei(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ori(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([I[ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method not()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method lti(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(I[I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method put(I[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method negi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rsub(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method addRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method toIntArray()[I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method hashCode()I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method diviColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method muliColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sum()D:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method sub(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method transpose()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method toBooleanArray2()[[Z:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mulColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zeros(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method selecti(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method getColumn(ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>([[D)V:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Assert.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method get([I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method assertSameSize(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method linspace(III)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method sortColumns()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rdivi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(Ljava/util/List;)V:
insert-annotation Method.body, Block.statement 2, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom

method <init>(I)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toArray2()[[D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toBooleanArray()[Z:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method getRowRange(III)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method distance2(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method maxi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method zeros(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method rand(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ranges/Range;Lorg/jblas/ranges/Range;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put([IID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method norm2()D:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom

method rsub(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sameLength(Lorg/jblas/DoubleMatrix;)Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method eq(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method columnMeans()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method min(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits

method subiColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method mini(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rsubi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rowArgmaxs()[I:
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method divi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method lei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gti(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method addi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method columnMaxs()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method ge(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method getRows(Lorg/jblas/ranges/Range;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method addi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method elementsAsList()Ljava/util/List;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method columnsAsList()Ljava/util/List;:
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom

method squaredDistance(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method gei(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method subRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rowSortingPermutations()[[I:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom

method min(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(Lorg/jblas/ranges/Range;Lorg/jblas/ranges/Range;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dot(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isNaNi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)D:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits

method resize(II)V:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isLowerTriangular()Z:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method copy(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sortRowsi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method project(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom

method valueOf(Ljava/lang/String;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method columnSortingPermutations()[[I:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method and(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.type: @units.qual.UnitsBottom

method getRange(IIII)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ones(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method <init>(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mulRow(ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ranges/Range;I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method load(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method muliRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rdiv(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method lei(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method gti(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method diag(Lorg/jblas/DoubleMatrix;II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gt(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rowArgmins()[I:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getColumns(Lorg/jblas/ranges/Range;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ensureResultLength(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sub(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method subColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method compare(Ljava/lang/Object;D)Z:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method diag()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 3, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/DoubleMatrix;ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method logspace(DDI)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.initializer, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rowMeans()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(Lorg/jblas/DoubleMatrix;ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method lt(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method gei(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method toString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method indexColumns(I)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method distance1(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get([I[I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method swapRows(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumns(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method columnArgmaxs()[I:
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mmul(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method eye(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method maxi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toArray()[D:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>([D)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addiRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.elseStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method findIndices()[I:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method gti(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method getRows()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(Lorg/jblas/DoubleMatrix;I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method div(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mini(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method columnMins()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(II[D)V:
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method multipliesWith(Lorg/jblas/DoubleMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method columnSums()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method assertSameLength(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mmul(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method add(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sortRows()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method in(Ljava/io/DataInputStream;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom

method addColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isNaN()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method lt(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method subiRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method loadAsciiFile(Ljava/lang/String;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 0, ExpressionStatement.expression, Assignment.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 2, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 2, ForLoop.initializer 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(ILorg/jblas/ranges/Range;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method xor(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(I[ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method putRow(ILorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rand(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method diviRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method index(II)I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method print()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method divi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method maxi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method isRowVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(ILorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put([I[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method lti(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method max(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method select(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getRows(Lorg/jblas/ranges/Range;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method mini(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method div(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method min()D:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method max()D:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method indexRows(I)I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mmuli(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method checkColumns(I)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method neg()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method le(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method get(II)D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method muli(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method checkLength(I)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method rowMins()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method lti(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method concatVertically(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rankOneUpdate(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method rdiv(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method or(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method truthi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xor(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eq(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getColumns(Lorg/jblas/ranges/Range;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method columnArgmins()[I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method getColumns([I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumnRange(III)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mul(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method ori(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mulColumn(ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getRows(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method fill(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mulRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ne(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method out(Ljava/io/DataOutputStream;)V:
insert-annotation Method.body, Block.statement 4, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method randn(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method add(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method or(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method isEmpty()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cumulativeSumi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method andi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method sortColumnsi()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRow(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method isColumnVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rankOneUpdate(DLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method getRow(ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ori(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(IID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toComplex()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method andi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method xori(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method randn(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method diag(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method checkRows(I)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dup()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method truth()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sorti()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method subi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method scalar()D:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method normmax()D:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method put([ID)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method mmuli(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/DoubleMatrix;D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method and(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rowsAsList()Ljava/util/List;:
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method ones(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method reshape(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ne(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method lei(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toIntArray2()[[I:
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([IILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method isScalar()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method assertSquare()V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method eqi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method mean()D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getRows([I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rowSums()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method ge(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method putColumn(ILorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mini(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method addi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method divRowVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isInfinite()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sort()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRange(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method loadCSVFile(Ljava/lang/String;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 6, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 6, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom

method gei(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method nei(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addiColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method isInfinitei()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toString(Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method repmat(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method rsubi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method noti()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cumulativeSum()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divColumnVector(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sortingPermutation()[I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method swapColumns(II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method argmax()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom

method get(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sameSize(Lorg/jblas/DoubleMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method maxi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method gt(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method max(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method muli(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mul(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method prod()D:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumn(I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method norm1()D:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method isUpperTriangular()Z:
insert-annotation Method.body, Block.statement 1, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method scalar(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method le(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method assertMultipliesWith(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getColumns()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getLength()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toFloat()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method argmin()I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method lti(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get([II)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method gti(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method save(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method rowMaxs()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method addi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rdivi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method eqi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method gei(D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas:
class FloatMatrix$ElementsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method convertToFloatMatrix()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)Ljava/lang/Float;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.exceptions.org.jblas.exceptions:
class LapackConvergenceException:@units.qual.UnknownUnits
package org.jblas.util:
class Functions:
field LOG2:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

method max(II)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method log2(D)D:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method min(II)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sinc(D)D:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Return.expression, Binary.leftOperand, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Return.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Return.expression, Binary.rightOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.org.jblas:
class DoubleMatrix:@units.qual.UnitsBottom
package org.jblas.benchmark.org.jblas.benchmark:
class Benchmark:@units.qual.UnitsBottom
package org.jblas:
class Geometry:
method normalizeColumns(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method normalizeRows(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method centerColumns(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method centerRows(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method normalizeRows(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method normalizeColumns(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method pairwiseSquaredDistances(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom

method center(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method normalize(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method center(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method normalize(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method centerRows(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method centerColumns(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method pairwiseSquaredDistances(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

package org.jblas.ranges.org.jblas.ranges:
class IndicesRange:@units.qual.UnitsBottom
package org.jblas.org.jblas:
class FloatMatrix$ElementsAsListView:@units.qual.UnitsBottom
package org.jblas.ranges:
class AllRange:
field counter:
insert-annotation Variable.type: @units.qual.UnknownUnits

field upper:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field lower:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field value:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method length()I:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method hasMore()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method init(II)V:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method next()V:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method value()I:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toString()Ljava/lang/String;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>()V:

method index()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas:
class ComplexDoubleMatrix:
field rows:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field length:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field columns:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field data:
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mmuli(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method isSquare()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method xori(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom

method multipliesWith(Lorg/jblas/ComplexDoubleMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rsub(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putReal([IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(DLorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method get([II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ones(II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method addRowVector(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rdiv(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method hashCode()I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method columnSums()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method muli(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method div(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, ArrayAccess.index, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rsubi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toBooleanArray2()[[Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sub(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>([[D)V:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Assert.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method addi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rdiv(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method <init>(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom

method <init>(I)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method diag()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method toBooleanArray()[Z:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method swapRows(II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method and(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method norm2()D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method div(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sub(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getImag(I)D:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits

method xor(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muli(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method getRow(I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method putReal(ILorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method or(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get([I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method addColumnVector(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method toArray()[Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom

method toDoubleArray()[D:
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mmuli(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subRowVector(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method rowMeans()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method negi()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method resize(II)V:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get([I[I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method putReal(Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method or(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put([I[ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method putColumn(ILorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(II)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsBottom

method swapColumns(II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 0, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eqi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method scalar()Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmul(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put([ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexDoubleMatrix;ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method or(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method addi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method andi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ne(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method load(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method rdivi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ensureResultLength(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method reshape(II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method hermitian()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method indexColumns(I)I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method concatVertically(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eq(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(I[ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method <init>([D)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnknownUnits

method sameLength(Lorg/jblas/ComplexDoubleMatrix;)Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method findIndices()[I:
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/ComplexDoubleMatrix;ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getRows()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdiv(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method xori(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method and(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getReal(I)D:
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putReal([ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method diag(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method truth()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dotu(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(II[D)V:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method diag(Lorg/jblas/ComplexDoubleMatrix;II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method subColumnVector(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method ori(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method toArray2()[[Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method eqi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method noti()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putRow(ILorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method div(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method in(Ljava/io/DataInputStream;)V:
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rankOneUpdate(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(I[ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ones(I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(IDD)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rsubi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method zeros(I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method assertSameLength(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([IILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method subi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ne(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method index(II)I:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method print()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mean()Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, TypeCast.type: @units.qual.UnknownUnits

method subi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isRowVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method get(I[I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method putImag(IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method columnMeans()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putImag(ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnknownUnits

method ori(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method indexRows(I)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method putReal(IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method putImag(ILorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method checkColumns(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method xor(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom

method checkLength(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method getReal()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method putImag([I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method andi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method rsub(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method transpose()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom

method put(I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method nei(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method dup()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method getColumn(I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putReal(ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method out(Ljava/io/DataOutputStream;)V:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method isEmpty()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(IIDD)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method mmul(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method truthi()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rowSums()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isColumnVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eq(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method subi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method nei(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putReal([I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mul(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method assertSameSize(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method put(ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method scalar(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method real()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zeros(II)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method putImag([IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method divi(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method checkRows(I)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putReal(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method mul(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put([I[ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method sub(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method not()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method normmax()D:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method xor(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmul(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>([Lorg/jblas/ComplexDouble;)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method concatHorizontally(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method and(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method add(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method dotc(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sameSize(Lorg/jblas/ComplexDoubleMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putImag([ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits

method assertSquare()V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method isScalar()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method xori(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sum()Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method copy(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put([IID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method imag()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(IILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ComplexDoubleMatrix;I)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rsub(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eq(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put(IILorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method conj()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ne(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put([ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexDoubleMatrix;ILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([IILorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method norm1()D:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getColumns()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method conji()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getLength()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putReal(Lorg/jblas/ComplexDoubleMatrix;ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method mul(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method save(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method putReal(I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method putImag(I[ID)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rsubi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method assertMultipliesWith(Lorg/jblas/ComplexDoubleMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method nei(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rdivi(D)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method neg()Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method xori(DLorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas.exceptions:
class LapackArgumentException:
method <init>(Ljava/lang/String;I)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, Binary.rightOperand: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class FloatMatrix$1:@units.qual.UnitsBottom
package org.jblas:
class ComplexFloatMatrix:
field rows:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field length:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field columns:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field data:
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsBottom

method rsub(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method isSquare()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(II)Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 1, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/ComplexFloatMatrix;ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom

method putReal(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method div(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ori(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method normmax()F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method or(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sub(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([IILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method hashCode()I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method columnMeans()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get([I[I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toBooleanArray2()[[Z:
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method rdiv(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method rowSums()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mean()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method divi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method isVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(I)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toBooleanArray()[Z:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method real()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method put([IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method and(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method put(IIFF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdiv(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method get([II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits

method neg()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subColumnVector(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method addColumnVector(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method getReal()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom

method subRowVector(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom

method rsubi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method norm1()F:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(I[I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mmuli(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putReal([I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method putReal([IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method concatHorizontally(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom

method putImag(IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putRow(ILorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putImag(IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putImag([IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sub(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method andi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method toArray()[Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method resize(II)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xor(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method noti()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom

method dotc(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sum()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([I[ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method and(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method multipliesWith(Lorg/jblas/ComplexFloatMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method diag(Lorg/jblas/ComplexFloatMatrix;II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method putImag([IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method putReal([IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexFloatMatrix;IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method rsubi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rowMeans()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xor(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method scalar(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putImag(ILorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method or(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom

method load(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method sub(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexFloatMatrix;ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmul(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method swapColumns(II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method addRowVector(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method mul(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ones(I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method <init>([Lorg/jblas/ComplexFloat;)V:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method putImag(I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method indexColumns(I)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method add(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method eq(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put([I[ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method getImag(I)F:
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(I)Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 0, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 1, ArrayAccess.index, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method addi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putReal(Lorg/jblas/ComplexFloatMatrix;IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method conji()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method columnSums()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method findIndices()[I:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getRows()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method negi()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sameSize(Lorg/jblas/ComplexFloatMatrix;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method toDoubleArray()[F:
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eqi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method putReal(Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method concatVertically(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method getRow(I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method eqi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method in(Ljava/io/DataInputStream;)V:
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method muli(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method transpose()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method putReal(IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method and(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zeros(II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method index(II)I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>([[F)V:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Assert.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method xori(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method print()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(IILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method nei(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom

method isRowVector()Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ones(II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method xori(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ori(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method indexRows(I)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method xor(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method putImag([I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method ne(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ne(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method copy(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method checkColumns(I)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eqi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method truth()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method reshape(II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eq(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method checkLength(I)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method diag()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toArray2()[[Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom

method get([I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method put(I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rsub(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method get(Lorg/jblas/ComplexFloatMatrix;I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method eq(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method not()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method andi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dotu(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rdiv(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method xori(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom

method or(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putReal(ILorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method andi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method out(Ljava/io/DataOutputStream;)V:
insert-annotation Method.body, Block.statement 4, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isEmpty()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isColumnVector()Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method xori(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method div(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method nei(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method getReal(I)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method swapRows(II)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method assertSameLength(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method nei(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method muli(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method putImag(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method assertMultipliesWith(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method checkRows(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method rdivi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method putReal(I[IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method imag()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom

method xori(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method assertSameSize(Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method conj()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(Lorg/jblas/ComplexFloatMatrix;IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method isScalar()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method scalar()Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method assertSquare()V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method diag(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method div(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method putColumn(ILorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(IF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ori(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom

method getColumn(I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(IILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method eqi(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>([F)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnknownUnits

method put(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ensureResultLength(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mmuli(FLorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(FLorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom

method zeros(I)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method norm2()F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method hermitian()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method <init>(II[F)V:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method rdivi(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method put([ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method truthi()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method dup()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get(ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sameLength(Lorg/jblas/ComplexFloatMatrix;)Z:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumns()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getLength()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(I[ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method save(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method mul(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(IFF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mul(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method mmul(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method putReal(IIF)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.variable, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(ILorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, ArrayAccess.index, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ne(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put([IILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method put(I[ILorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rsub(F)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmul(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

package org.jblas:
class NativeBlas:
field floatDummy:
insert-annotation Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field doubleDummy:
insert-annotation Variable.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field intDummy:
insert-annotation Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnknownUnits

method dposv(CII[DII[DII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom

method dsygvx(ICCCI[DII[DIIDDIID[II[DI[DII[II[II)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 27: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.parameter 25, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 23, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 29: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 21: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 24: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 24: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 20, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom

method dorgqr(III[DII[DI[DII)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sposv(CII[FII[FII)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zgemv(CIILorg/jblas/ComplexDouble;[DII[DIILorg/jblas/ComplexDouble;[DII)V:
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method zgeru(IILorg/jblas/ComplexDouble;[DII[DII[DII)V:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom

method ssyevd(CCI[FII[FI[FII[III)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method ssyevx(CCCI[FIIFFIIF[II[FI[FII[FII[II[II)I:
insert-annotation Method.parameter 24, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 22, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dger(IID[DII[DII[DII)V:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method izamax(I[DII)I:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dorgqr(III[DII[DI)I:
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cswap(I[FII[FII)V:
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sorgqr(III[FII[FI)I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom

method dgesvd(CCII[DII[DI[DII[DII)I:
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method sgeev(CCI[FII[FI[FI[FII[FII)I:
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom

method cscal(ILorg/jblas/ComplexFloat;[FII)V:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method dgeqrf(II[DII[DI)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dcopy(I[DII[DII)V:
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method sorgqr(III[FII[FI[FII)I:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cgesvd(CCII[FII[FI[FII[FII[FII[FI)I:
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom

method isamax(I[FII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method dsysv(CII[DII[II[DII[DII)I:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsyev(CCI[DII[DI)I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom

method caxpy(ILorg/jblas/ComplexFloat;[FII[FII)V:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method idamax(I[DII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method sscal(IF[FII)V:
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ssyevx(CCCI[FIIFFIIF[II[FI[FII[II[II)I:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 23: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 21: @units.qual.UnitsBottom

method cgerc(IILorg/jblas/ComplexFloat;[FII[FII[FII)V:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method dsyevx(CCCI[DIIDDIID[II[DI[DII[II[II)I:
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 21: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 23: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sasum(I[FII)F:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zscal(ILorg/jblas/ComplexDouble;[DII)V:
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom

method dnrm2(I[DII)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cgeev(CCI[FII[FI[FII[FII[FI)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom

method sgesvd(CCII[FII[FI[FII[FII[FII)I:
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dgesv(II[DII[II[DII)I:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method sgesv(II[FII[II[FII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom

method scasum(I[FII)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method sgetrf(II[FII[II)I:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method sswap(I[FII[FII)V:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method zdotc(I[DII[DII)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method cgemm(CCIIILorg/jblas/ComplexFloat;[FII[FIILorg/jblas/ComplexFloat;[FII)V:
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method scopy(I[FII[FII)V:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method zgeev(CCI[DII[DI[DII[DII[DII[DI)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom

method ssygvx(ICCCI[FII[FIIFFIIF[II[FI[FII[II[II)I:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 24: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 21: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 29: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 24: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 27: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 25, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom

method sgemv(CIIF[FII[FIIF[FII)V:
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method ssygvd(ICCI[FII[FII[FI[FII[III)I:
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method sgemm(CCIIIF[FII[FIIF[FII)V:
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method dzasum(I[DII)D:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ssyevr(CCCI[FIIFFIIF[II[FI[FII[II)I:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 23: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 26: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dormqr(CCIII[DII[DI[DII[DII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom

method ssysv(CII[FII[II[FII[FII)I:
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dgetrf(II[DII[II)I:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dswap(I[DII[DII)V:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnknownUnits

method sgelsd(III[FII[FII[FIF[II[II)I:
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom

method dsyev(CCI[DII[DI[DII)I:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom

method ssygvx(ICCCI[FII[FIIFFIIF[II[FI[FII[FII[II[II)I:
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 28, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 26, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 28, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 29, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 27, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dsygvd(ICCI[DII[DII[DI)I:
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom

method zswap(I[DII[DII)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dgeev(CCI[DII[DI[DI[DII[DII)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom

method ssyevd(CCI[FII[FI)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom

method icamax(I[FII)I:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dscal(ID[DII)V:
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ssyev(CCI[FII[FI)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsygvd(ICCI[DII[DII[DI[DII[III)I:
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method sgeqrf(II[FII[FI)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method ccopy(I[FII[FII)V:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsysv(CII[DII[II[DII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method zaxpy(ILorg/jblas/ComplexDouble;[DII[DII)V:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dgemv(CIID[DII[DIID[DII)V:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ssyev(CCI[FII[FI[FII)I:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cgesvd(CCII[FII[FI[FII[FII[FI)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dgeqrf(II[DII[DI[DII)I:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method zgemm(CCIIILorg/jblas/ComplexDouble;[DII[DIILorg/jblas/ComplexDouble;[DII)V:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ssysv(CII[FII[II[FII)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom

method dsyevx(CCCI[DIIDDIID[II[DI[DII[DII[II[II)I:
insert-annotation Method.parameter 24, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 22, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsyevd(CCI[DII[DI)I:
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method ssygvd(ICCI[FII[FII[FI)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom

method dpotrf(CI[DII)I:
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zgesvd(CCII[DII[DI[DII[DII[DI)I:
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method dgelsd(III[DII[DII[DID[II[DII[II)I:
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dgelsd(III[DII[DII[DID[II[II)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom

method zdotu(I[DII[DII)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method dgesvd(CCII[DII[DI[DII[DII[DII)I:
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sgeqrf(II[FII[FI[FII)I:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method cdotu(I[FII[FII)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method dsyevd(CCI[DII[DI[DII[III)I:
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method zgeev(CCI[DII[DI[DII[DII[DI)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 18: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.dimension 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sgeev(CCI[FII[FI[FI[FII[FII[FII)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsyevr(CCCI[DIIDDIID[II[DI[DII[II[DII[III)I:
insert-annotation Method.parameter 24, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sgesvd(CCII[FII[FI[FII[FII)I:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dznrm2(I[DII)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method cgemv(CIILorg/jblas/ComplexFloat;[FII[FIILorg/jblas/ComplexFloat;[FII)V:
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom

method zgesvd(CCII[DII[DI[DII[DII[DII[DI)I:
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sger(IIF[FII[FII[FII)V:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom

method ssyevr(CCCI[FIIFFIIF[II[FI[FII[II[FII[III)I:
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom

method sormqr(CCIII[FII[FI[FII[FII)I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsygvx(ICCCI[DII[DIIDDIID[II[DI[DII[DII[II[II)I:
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 26, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 28, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 23, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 23, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 20, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 24, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 26, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 27, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 28, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 29, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cdotc(I[FII[FII)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method spotrf(CI[FII)I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dormqr(CCIII[DII[DI[DII)I:
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom

method sormqr(CCIII[FII[FI[FII)I:
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 14: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method cgeru(IILorg/jblas/ComplexFloat;[FII[FII[FII)V:
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom

method zcopy(I[DII[DII)V:
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method snrm2(I[FII)F:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method scnrm2(I[FII)F:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cgeev(CCI[FII[FI[FII[FII[FII[FI)I:
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dsyevr(CCCI[DIIDDIID[II[DI[DII[II)I:
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 25: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 26: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 19, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 23: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method zgerc(IILorg/jblas/ComplexDouble;[DII[DII[DII)V:
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dasum(I[DII)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom

method dgeev(CCI[DII[DI[DI[DII[DII[DII)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 16, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dgemm(CCIIID[DII[DIID[DII)V:
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method sgelsd(III[FII[FII[FIF[II[FII[II)I:
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 16, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 17, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 13, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 14, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 12, Variable.type, ArrayType.type: @units.qual.UnitsBottom

package org.jblas:
class Solve:
method solveSymmetric(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method solveLeastSquares(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 2, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 2, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method solveSymmetric(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method solveLeastSquares(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 2, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.argument 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 2, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.initializer, MethodInvocation.argument 1, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method pinv(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method solvePositive(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method solve(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom

method pinv(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method solvePositive(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method solve(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.benchmark:
class JavaDoubleMultiplicationBenchmark:
method run(ID)Lorg/jblas/benchmark/BenchmarkResult;:
insert-annotation Method.body, Block.statement 9, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, WhileLoop.statement, Block.statement 2, ExpressionStatement.expression, CompoundAssignment.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>()V:

method getName()Ljava/lang/String;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mmuli(I[D[D[D)V:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.benchmark:
class NativeFloatMultiplicationBenchmark:
method run(ID)Lorg/jblas/benchmark/BenchmarkResult;:
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, WhileLoop.statement, Block.statement 2, ExpressionStatement.expression, CompoundAssignment.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom

method <init>()V:

method getName()Ljava/lang/String;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsBottom

package org.jblas.benchmark.org.jblas.benchmark:
class JavaFloatMultiplicationBenchmark:@units.qual.UnitsBottom
package org.jblas:
class JavaBlas:
method rswap(I[FII[FII)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method rcopy(I[DII[DII)V:
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom

method rswap(I[DII[DII)V:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom

method raxpy(IF[FII[FII)V:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits

method rdot(I[FII[FII)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rzgxpy(I[D[D[D)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rzaxpy(I[FIIF[FII[FII)V:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom

method raxpy(ID[DII[DII)V:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom

method rzaxpy(I[DIID[DII[DII)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom

method rcopy(I[FII[FII)V:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand, Binary.rightOperand, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom

method rdot(I[DII[DII)D:
insert-annotation Method.parameter 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, ForLoop.initializer 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom

method rzgxpy(I[F[F[F)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.ranges:
class PointRange:
field consumed:
insert-annotation Variable.type: @units.qual.UnitsBottom

field value:
insert-annotation Variable.type: @units.qual.UnitsBottom

method length()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method init(II)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom

method hasMore()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method value()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method next()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method index()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(I)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.ranges:
class Range:
method length()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method init(II)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method hasMore()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method next()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method value()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method index()I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class FloatMatrix$ColumnsAsListView:@units.qual.UnitsBottom
package org.jblas:
class Decompose$QRDecomposition:
method <init>(Ljava/lang/Object;Ljava/lang/Object;)V:

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas:
class FloatMatrix$1:
method compare(Ljava/lang/Object;Ljava/lang/Object;)I:
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.elseStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom

package org.jblas:
class MatrixFunctions:
method tanh(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method pow(DD)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sin(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ceil(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method tan(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method signum(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cbrt(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method coshi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method atan(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method log10(D)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method absi(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method pow(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tanh(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method floor(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method atan(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method powi(Lorg/jblas/DoubleMatrix;D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method cbrt(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method log10(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method powi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method acos(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tanh(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method atan(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sini(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method asin(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method expm(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 24, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 15, Variable.initializer, MethodInvocation.argument 0, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 26, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 14, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 16, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 6, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 13, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 26, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 13, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method floatToDouble(Lorg/jblas/FloatMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method abs(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cos(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ceili(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method log10i(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sini(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method pow(FF)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sinhi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method log(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cosh(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cbrti(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method sin(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cosh(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sinh(D)D:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method log(D)D:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ceil(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tan(D)D:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method abs(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cos(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method expm(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 21, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 23, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 13, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 25, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 15, Variable.initializer, MethodInvocation.argument 0, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 13, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 15, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 17, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 19, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 22, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 24, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 26, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 9, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 16, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 14, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 26, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 18, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 20, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method asin(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tan(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method ceili(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method floori(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method signumi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method expi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method cosi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method logi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method cos(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method powi(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method coshi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method acos(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method exp(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method floor(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method pow(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method cbrt(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method signum(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sqrt(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cbrt(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method atani(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method tanhi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method acosi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method abs(D)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method tanhi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sqrt(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method exp(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method pow(Lorg/jblas/DoubleMatrix;D)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method asini(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits

method ceil(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method floori(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method powi(Lorg/jblas/FloatMatrix;F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method sqrt(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method powi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method doubleToFloat(Lorg/jblas/DoubleMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sin(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method cosh(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method signum(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method ceil(D)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method tanh(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method pow(Lorg/jblas/FloatMatrix;F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method log(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method log10(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sinhi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method floor(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method log10i(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method absi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method expi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method exp(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method atan(D)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method signumi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method absi(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method floor(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sin(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method asin(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method logi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method sqrt(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method powi(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method acosi(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method atani(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method tani(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method asin(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method exp(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method asini(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method sinh(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tani(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method cbrti(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sqrti(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method acos(D)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method signum(D)D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method acos(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method sinh(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cos(D)D:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method abs(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method absi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cosh(F)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method pow(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method tan(F)F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method log(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method cosi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sqrti(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method sinh(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method log10(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method pow(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class FloatMatrix$RowsAsListView:@units.qual.UnitsBottom
package org.jblas:
class FloatMatrix$RowsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method get(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method convertToFloatMatrix()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class DoubleMatrix$ElementsAsListView:@units.qual.UnitsBottom
package org.jblas:
class ComplexDouble:
field NEG_I:
insert-annotation Variable.initializer, NewClass.argument 1, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field I:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom

field NEG_UNIT:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewClass.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field ZERO:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

field i:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field UNIT:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dup()Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method imag()D:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method div(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method subi(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muli(DLorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isZero()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sub(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isImag()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(DLorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method hashCode()I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method copy(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(DLorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ne(Lorg/jblas/ComplexDouble;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method conj()Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method abs()D:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method invi()Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method arg()D:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method inv()Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mul(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method real()D:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits

method div(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mul(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method eq(Lorg/jblas/ComplexDouble;)Z:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom

method addi(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method neg()Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(DLorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method <init>(DD)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method <init>(D)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muli(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method isReal()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method add(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDouble;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method set(DD)Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sqrt()Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, Binary.leftOperand, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method conji()Lorg/jblas/ComplexDouble;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method negi()Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sub(D)Lorg/jblas/ComplexDouble;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.util:
class Random:
field r:
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

method seed(J)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, Assignment.expression, NewClass.identifier: @units.qual.UnitsBottom

package org.jblas.util:
class Permutations:
method permutationFloatMatrixFromPivotIndices(I[I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method randomSubset(II)[I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Assert.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, WhileLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom

method randomPermutation(I)[I:
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method permutationDoubleMatrixFromPivotIndices(I[I)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=1)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom

package org.jblas.exceptions:
class LapackSingularityException:
insert-annotation Class.bound -1: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class DoubleMatrix$ColumnsAsListView:@units.qual.UnitsBottom
package org.jblas:
class ConvertsToFloatMatrix:
method convertToFloatMatrix()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas:
class ComplexFloat:
field NEG_I:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewClass.argument 1, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

field I:
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field NEG_UNIT:
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field ZERO:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

field i:
insert-annotation Variable.type: @units.qual.UnknownUnits

field UNIT:
insert-annotation Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sqrt()Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 6, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, Binary.leftOperand, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method imag()F:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits

method neg()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>(F)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isZero()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method muli(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method conji()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>(FF)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits

method isImag()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method dup()Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method muli(FLorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method hashCode()I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom

method div(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mul(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(FLorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method eq(Lorg/jblas/ComplexFloat;)Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method add(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method abs()F:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom

method inv()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method arg()F:
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method copy(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom

method addi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method real()F:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits

method set(FF)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method conj()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method invi()Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits

method subi(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method subi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method ne(Lorg/jblas/ComplexFloat;)Z:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mul(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method add(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method div(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method subi(FLorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isReal()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method negi()Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sub(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits

method sub(F)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method divi(Lorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method divi(FLorg/jblas/ComplexFloat;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class Decompose$LUDecomposition:@units.qual.UnitsBottom
package org.jblas.util:
class LibraryLoader:
insert-annotation Class.initializer 0, Block.statement 1, Try.block, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.block, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.block, Block.statement 2, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.methodSelect, MemberSelect.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.block, Block.statement 2, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 1, Try.block, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

field libpath:
insert-annotation Variable.type: @units.qual.UnitsBottom

field tempDir:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field logger:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method loadLibraryFromStream(Ljava/lang/String;Ljava/io/InputStream;)V:
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 10, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.catch 1, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 11, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 10, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 10, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.catch 1, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 6, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 8, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 11, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 12, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 12, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 12, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.catch 1, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 10, Variable.initializer, Binary.leftOperand, TypeCast.expression, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom

method findLibrary([Ljava/lang/String;Ljava/lang/String;)Ljava/io/InputStream;:
insert-annotation Method.body, Block.statement 1, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, EnhancedForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method loadLibrary(Ljava/lang/String;Z)V:
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.initializer 1, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.initializer 0, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom

method tryPath(Ljava/lang/String;)Ljava/io/InputStream;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method createTempFile(Ljava/lang/String;)Ljava/io/File;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method getUnifiedOSName()Ljava/lang/String;:
insert-annotation Method.type: @units.qual.UnknownUnits

method unifyOSName(Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>()V:
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom

method fatJarLibraryPath(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas:
class Singular:
method fullSVD(Lorg/jblas/FloatMatrix;)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom

method SVDValues(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 14: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sparseSVD(Lorg/jblas/ComplexDoubleMatrix;)[Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.initializer 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method fullSVD(Lorg/jblas/DoubleMatrix;)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom

method fullSVD(Lorg/jblas/ComplexFloatMatrix;)[Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.initializer 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method fullSVD(Lorg/jblas/ComplexDoubleMatrix;)[Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.initializer 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method SVDValues(Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method sparseSVD(Lorg/jblas/DoubleMatrix;)[Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method SVDValues(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, MethodInvocation.argument 14: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method SVDValues(Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sparseSVD(Lorg/jblas/ComplexFloatMatrix;)[Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.initializer 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, MethodInvocation.argument 16: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom

method sparseSVD(Lorg/jblas/FloatMatrix;)[Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom

package org.jblas.benchmark.org.jblas.benchmark:
class JavaDoubleMultiplicationBenchmark:@units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
package org.jblas.benchmark:
class Timer:
field stopTime:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field startTime:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method start()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method elapsedSeconds()D:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ranFor(D)Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.leftOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method stop()J:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>()V:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.exceptions.org.jblas.exceptions:
class LapackSingularityException:@units.qual.UnitsBottom
package org.jblas.benchmark.org.jblas.benchmark:
class NativeDoubleMultiplicationBenchmark:@units.qual.UnitsBottom
package org.jblas.util:
class Logger:
field theLogger:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

field CONFIG:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

field DEBUG:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

field INFO:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

field levelNames:
insert-annotation Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.initializer 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewArray.initializer 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.initializer 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewArray.initializer 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer, NewArray.initializer 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field WARNING:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

field ERROR:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

field level:
insert-annotation Variable.type: @units.qual.UnitsBottom

method info(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method setLevel(I)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method error(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method config(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method log(ILjava/lang/String;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method debug(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method <init>()V:

method warning(Ljava/lang/String;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas.benchmark:
class Main:
field multiplicationBenchmarks:
insert-annotation Variable.initializer, NewArray.initializer 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.initializer 3, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.initializer 0, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.initializer 2, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method main([Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.statement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.statement, Block.statement 3, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 3, If.elseStatement, If.elseStatement, If.elseStatement, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 3, If.elseStatement, If.elseStatement, If.elseStatement, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 2, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 3, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.statement, Block.statement 3, EnhancedForLoop.statement, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 3, If.elseStatement, If.elseStatement, If.elseStatement, If.elseStatement, Block.statement 1, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.initializer 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.statement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 15, EnhancedForLoop.statement, Block.statement 3, EnhancedForLoop.statement, Block.statement 2, Variable.initializer, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method printHelp()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas:
class Decompose:
method decomposeLowerUpper(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method cholesky(Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsBottom

method decomposeLowerUpper(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method clearLower(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cholesky(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom

method lu(Lorg/jblas/DoubleMatrix;)Lorg/jblas/Decompose$LUDecomposition;:
insert-annotation Method.body, Block.statement 7, Return.expression, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom

method clearLower(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method qr(Lorg/jblas/FloatMatrix;)Lorg/jblas/Decompose$QRDecomposition;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Return.expression, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method lu(Lorg/jblas/FloatMatrix;)Lorg/jblas/Decompose$LUDecomposition;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Return.expression, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method qr(Lorg/jblas/DoubleMatrix;)Lorg/jblas/Decompose$QRDecomposition;:
insert-annotation Method.body, Block.statement 8, Return.expression, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Return.expression, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.benchmark:
class BenchmarkResult:
field iterations:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field numOps:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field duration:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(JDI)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method printResult()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.ranges.org.jblas.ranges:
class AllRange:@units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
package org.jblas.benchmark.org.jblas.benchmark:
class NativeFloatMultiplicationBenchmark:@units.qual.UnitsBottom
package org.jblas:
class ConvertsToDoubleMatrix:
method convertToDoubleMatrix()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

package org.jblas.util:
class LibraryLoader$1:
method run()V:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom

package org.jblas.util:
class LibraryLoader$2:
method run()V:
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 0, Assert.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 5, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 3, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, EnhancedForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 4, EnhancedForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Try.block, Block.statement 2, Variable.type: @units.qual.UnitsBottom

package org.jblas.benchmark:
class Benchmark:
method run(ID)Lorg/jblas/benchmark/BenchmarkResult;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getName()Ljava/lang/String;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas:
class Info:
field VERSION:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

package org.jblas:
class FloatMatrix:
field rows:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field length:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field columns:
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field serialVersionUID:
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field data:
insert-annotation Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field EMPTY:
insert-annotation Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

method rankOneUpdate(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isSquare()Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ones(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom

method diviColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method sortRows()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method distance2(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sub(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muli(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method diag()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 3, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method normmax()F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method diag(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method getColumn(ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toIntArray()[I:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method hashCode()I:
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addiColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method get(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method gei(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method maxi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method swapRows(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumns([I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method selecti(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method fill(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method toBooleanArray2()[[Z:
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method gti(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method negi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method columnMeans()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mini(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method addi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method max(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method addRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isVector()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method divi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put(Lorg/jblas/FloatMatrix;ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rsubi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method lti(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method <init>(Ljava/util/List;)V:
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, EnhancedForLoop.variable, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method <init>(I)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsBottom

method toBooleanArray()[Z:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put([I[IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method divi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sortColumns()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method andi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method toString()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/FloatMatrix;IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method assertMultipliesWith(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method truth()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method sorti()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get([II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom

method muli(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method prod()F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method isNaNi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toArray()[F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method get(ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method nei(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rowArgmaxs()[I:
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method norm1()F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method mulRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method zeros(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method randn(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method logspace(FFI)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.initializer, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method and(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method or(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method project(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom

method gei(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method elementsAsList()Ljava/util/List;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(ILorg/jblas/ranges/Range;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method columnsAsList()Ljava/util/List;:
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom

method ne(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rowSortingPermutations()[[I:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method resize(II)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method isLowerTriangular()Z:
insert-annotation Method.body, Block.statement 1, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom

method mul(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method neg()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method valueOf(Ljava/lang/String;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method columnMins()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method assertSameLength(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method eq(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method put(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method columnSortingPermutations()[[I:
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom

method <init>()V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, TypeCast.type, ArrayType.type: @units.qual.UnitsBottom

method rowSums()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method <init>(II)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method randn(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom

method load(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method muliColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method min()F:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method getRows(Lorg/jblas/ranges/Range;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method sum()F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method gti(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getColumn(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mini(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rowArgmins()[I:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom

method concatVertically(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method get(II)F:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits

method max()F:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get([I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rsub(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put([IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom

method concatHorizontally(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method toArray2()[[F:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mmuli(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method min(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method putRow(ILorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sort()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method put(ILorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method zeros(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method mmuli(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method andi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method indexColumns(I)I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method put(Lorg/jblas/FloatMatrix;F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method lei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method mmul(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method getColumns(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumns(Lorg/jblas/ranges/Range;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method le(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put([ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method lei(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method ones(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rand(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method noti()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method mul(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method columnArgmaxs()[I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method truthi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method xori(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method get([I[I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method div(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits

method repmat(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method findIndices()[I:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRows(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method cumulativeSum()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getRows()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ori(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method select(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method subi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.elseStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0, Unary.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getColumns(Lorg/jblas/ranges/Range;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rdivi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method min(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dup()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method eqi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method div(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method get(I)F:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(Lorg/jblas/FloatMatrix;I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ge(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method distance1(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method divi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method in(Ljava/io/DataInputStream;)V:
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ExpressionStatement.expression, Assignment.expression, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method mulColumn(IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method rsubi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isNaN()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method getRange(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method sortColumnsi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method scalar()F:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnknownUnits

method maxi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method ori(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method lti(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method addiRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method <init>([[F)V:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Assert.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method index(II)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method add(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method print()V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method putColumn(ILorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gei(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method put([IILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method isRowVector()Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method swapColumns(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method linspace(III)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.leftOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.initializer, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method muliRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method xori(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method get(Lorg/jblas/ranges/Range;I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRows([I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method gt(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method indexRows(I)I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ori(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method xor(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method mean()F:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method addColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method checkColumns(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method diviRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method put([IIF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method sub(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method transpose()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits

method scalar(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method addi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method checkLength(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method ensureResultLength(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method loadCSVFile(Ljava/lang/String;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 6, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ParameterizedType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier, ParameterizedType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 6, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rankOneUpdate(FLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sameLength(Lorg/jblas/FloatMatrix;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toComplex()Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method columnArgmins()[I:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method get(Lorg/jblas/ranges/Range;Lorg/jblas/ranges/Range;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method compare(Ljava/lang/Object;F)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom

method addi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits

method isInfinitei()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom

method mini(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method out(Ljava/io/DataOutputStream;)V:
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rdiv(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method rand(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom

method gti(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method isEmpty()Z:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method columnSums()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method columnMaxs()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method getRowRange(III)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdiv(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method isColumnVector()Z:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method or(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method maxi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method divi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits

method lei(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method gt(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method lti(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRow(ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 2, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sortRowsi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ge(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method subi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method max(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method ne(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method gti(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method checkRows(I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method lt(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dot(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method getColumnRange(III)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method rankOneUpdate(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method multipliesWith(Lorg/jblas/FloatMatrix;)Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method xori(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method rowsAsList()Ljava/util/List;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.typeArgument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type, ParameterizedType.type: @units.qual.UnitsBottom

method mulRow(IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method add(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method put(I[IF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits

method gei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom

method put(Lorg/jblas/ranges/Range;Lorg/jblas/ranges/Range;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method xori(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method muli(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method xor(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method and(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom

method not()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method reshape(II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method toIntArray2()[[I:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method nei(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method isInfinite()Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method assertSquare()V:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method isScalar()Z:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method lt(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method assertSameSize(Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom

method eye(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method nei(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom

method lei(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method cumulativeSumi()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, If.elseStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Block.statement 1, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method andi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>([F)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toString(Ljava/lang/String;)Ljava/lang/String;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method ori(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsBottom

method rowMaxs()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom

method squaredDistance(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method getRow(I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method get(I[I)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method diag(Lorg/jblas/FloatMatrix;II)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method mmul(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method norm2()F:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Return.expression, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method subiColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom

method divRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method put(I[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom

method sortingPermutation()[I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method eq(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method mini(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method argmax()I:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rowMeans()Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(IIF)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method mmuli(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>(II[F)V:
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sameSize(Lorg/jblas/FloatMatrix;)Z:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method eqi(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getRows(Lorg/jblas/ranges/Range;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 4, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method rdivi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method nei(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method maxi(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rsubi(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method copy(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method isUpperTriangular()Z:
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.statement, Block.statement 0, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ForLoop.statement, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Return.expression: @units.qual.UnitsBottom

method getColumns()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method getLength()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method toFloat()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1, TypeCast.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method argmin()I:
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method subi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method eqi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method save(Ljava/lang/String;)V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method muli(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method subiRowVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method rsub(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method le(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 1, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method mulColumnVector(Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method lti(F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

method loadAsciiFile(Ljava/lang/String;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 4, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 2, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand, MethodInvocation.methodSelect, MemberSelect.expression, ArrayAccess.index, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 4, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 2, ForLoop.initializer 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, WhileLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 1, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 3, WhileLoop.statement, Block.statement 1, Variable.initializer, ConditionalExpression.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Try.block, Block.statement 0, ExpressionStatement.expression, Assignment.expression, NewClass.identifier: @units.qual.UnitsBottom

method andi(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 1, Variable.initializer, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.trueExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.falseExpression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ForLoop.statement, ExpressionStatement.expression, MethodInvocation.argument 1, ConditionalExpression.condition, Binary.leftOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method put([I[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnknownUnits
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom

method equals(Ljava/lang/Object;)Z:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom

method getRange(IIII)Lorg/jblas/FloatMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method rowMins()Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

method put(ILorg/jblas/FloatMatrix;F)Lorg/jblas/FloatMatrix;:
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class FloatMatrix:@units.qual.UnitsBottom
package org.jblas.benchmark:
class JavaFloatMultiplicationBenchmark:
method mmuli(I[F[F[F)V:
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.statement, Block.statement 0, ExpressionStatement.expression, Assignment.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 1, ForLoop.statement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method run(ID)Lorg/jblas/benchmark/BenchmarkResult;:
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 4, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, WhileLoop.statement, Block.statement 2, ExpressionStatement.expression, CompoundAssignment.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Return.expression, NewClass.identifier: @units.qual.UnitsBottom

method <init>()V:

method getName()Ljava/lang/String;:
insert-annotation Method.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter -1: @units.qual.UnitsBottom

package org.jblas.org.jblas:
class Decompose$QRDecomposition:@units.qual.UnitsBottom
package org.jblas:
class SimpleBlas:
method geev(CCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom

method gemm(FLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom

method dot(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method geru(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom

method iamax(Lorg/jblas/ComplexFloatMatrix;)I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 3: @units.qual.UnitsBottom

method ormqr(CCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method nrm2(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method dot(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method axpy(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method asum(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method gemm(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method copy(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method sygvx(ICCCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;DDIID[ILorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 21: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 26: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 17: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 24: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom

method gesv(Lorg/jblas/FloatMatrix;[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method gemv(DLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 12: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method copy(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method asum(Lorg/jblas/ComplexFloatMatrix;)F:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method swap(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method sysv(CLorg/jblas/FloatMatrix;[ILorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method scal(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom

method syevd(CCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method ger(DLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom

method swap(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom

method iamax(Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 3: @units.qual.UnitsBottom

method scal(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method copy(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gelsd(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.dimension 0, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom

method nrm2(Lorg/jblas/ComplexFloatMatrix;)F:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method gerc(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom

method geev(CCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom

method orgqr(IILorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom

method asum(Lorg/jblas/DoubleMatrix;)D:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method gemm(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method dotc(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom

method axpy(Lorg/jblas/ComplexDouble;Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method sysv(CLorg/jblas/DoubleMatrix;[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method dotc(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method orgqr(IILorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method posv(CLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom

method gerc(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom

method scal(DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gelsd(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand, TypeCast.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.dimension 0, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 10, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, Variable.initializer, MethodInvocation.argument 1, Binary.leftOperand, TypeCast.expression, MethodInvocation.argument 0, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 11, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 11, Variable.initializer, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 9, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 12, If.elseStatement, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 8, Variable.initializer, NewArray.dimension 0, Binary.rightOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method dotu(Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloat;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsBottom

method gemv(FLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.condition, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 12: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.elseStatement, Block.statement 0, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 1, ForLoop.statement, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, ForLoop.statement, ExpressionStatement.expression, Assignment.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.thenStatement, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom

method ormqr(CCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 2, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method sygvd(ICCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom

method syev(CCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom

method nrm2(Lorg/jblas/ComplexDoubleMatrix;)D:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom

method scal(FLorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method copy(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 2: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method syevr(CCCLorg/jblas/FloatMatrix;FFIIFLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;[I)I:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method syevx(CCCLorg/jblas/DoubleMatrix;DDIIDLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 4, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 4, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom

method dotu(Lorg/jblas/ComplexDoubleMatrix;Lorg/jblas/ComplexDoubleMatrix;)Lorg/jblas/ComplexDouble;:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method gesv(Lorg/jblas/DoubleMatrix;[ILorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom

method posv(CLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom

method ger(FLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom

method syev(CCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsBottom

method geqrf(Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnknownUnits
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom

method iamax(Lorg/jblas/ComplexDoubleMatrix;)I:
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 3: @units.qual.UnitsBottom

method sygvd(ICCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.thenStatement, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 11: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.thenStatement, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, If.elseStatement, Block.statement 2, If.elseStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method axpy(FLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)Lorg/jblas/FloatMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method geqrf(Lorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)V:
insert-annotation Method.body, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, MethodInvocation.argument 3: @units.qual.UnitsBottom

method sygvx(ICCCLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;FFIIF[ILorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 21: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 19: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 6: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 26: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.thenStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 9: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.elseStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.leftOperand, Binary.rightOperand, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 24: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, Block.statement 1, If.thenStatement, Block.statement 0, Throw.expression, NewClass.argument 1, Binary.rightOperand: @units.qual.UnitsBottom

method asum(Lorg/jblas/ComplexDoubleMatrix;)D:
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method axpy(DLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 3: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 6: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method geru(Lorg/jblas/ComplexFloat;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;Lorg/jblas/ComplexFloatMatrix;)Lorg/jblas/ComplexFloatMatrix;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 8: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 4: @units.qual.UnitsBottom

method nrm2(Lorg/jblas/FloatMatrix;)F:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 3: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, MethodInvocation.argument 2: @units.qual.UnitsBottom

method syevr(CCCLorg/jblas/DoubleMatrix;DDIIDLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;[I)I:
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 13: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, MethodInvocation.argument 20: @units.qual.UnitsBottom

method checkInfo(Ljava/lang/String;I)V:
insert-annotation Method.body, Block.statement 0, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom

method syevd(CCLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;)I:
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 7: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, If.thenStatement, Throw.expression, NewClass.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, MethodInvocation.argument 4: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method iamax(Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 2: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Return.expression, Binary.leftOperand, MethodInvocation.argument 3: @units.qual.UnitsBottom

method gemm(DLorg/jblas/DoubleMatrix;Lorg/jblas/DoubleMatrix;DLorg/jblas/DoubleMatrix;)Lorg/jblas/DoubleMatrix;:
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 10: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 14: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 7: @units.qual.UnitsBottom

method syevx(CCCLorg/jblas/FloatMatrix;FFIIFLorg/jblas/FloatMatrix;Lorg/jblas/FloatMatrix;)I:
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 4, Throw.expression, NewClass.identifier: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 13: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.parameter 6, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 7, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 17: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.parameter 8, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 9, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.initializer 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.parameter 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 10, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 22: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.statement, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 5: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.dimension 0, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 4, Throw.expression, NewClass.argument 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 15: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 2, Variable.type, ArrayType.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 0: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, ExpressionStatement.expression, Assignment.expression, MethodInvocation.argument 20: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.initializer, NewArray.type 1: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.thenStatement, Block.statement 2, ForLoop.initializer 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 6, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

package org.jblas:
class DoubleMatrix$ElementsAsListView:
insert-annotation Class.bound -1, ParameterizedType.typeArgument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field me:
insert-annotation Variable.type: @units.qual.UnitsBottom

method get(I)Ljava/lang/Double;:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.type: @units.qual.UnknownUnits

method convertToDoubleMatrix()Lorg/jblas/DoubleMatrix;:
insert-annotation Method.type: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method size()I:
insert-annotation Method.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

method <init>(Lorg/jblas/DoubleMatrix;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom

package org.jblas.benchmark:
class NativeDoubleMultiplicationBenchmark:
method run(ID)Lorg/jblas/benchmark/BenchmarkResult;:
insert-annotation Method.body, Block.statement 9, Return.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 2, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 4, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.parameter 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 7, WhileLoop.statement, Block.statement 2, ExpressionStatement.expression, CompoundAssignment.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 1, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, Variable.type: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 1, Variable.initializer: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 5, Variable.initializer, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

method <init>()V:

method getName()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.parameter -1: @units.qual.UnitsBottom
insert-annotation Method.type: @units.qual.UnitsBottom

package org.jblas.ranges.org.jblas.ranges:
class PointRange:@units.qual.UnitsBottom
package org.jblas.util:
class ArchFlavor:
insert-annotation Class.initializer 0, Block.statement 0, Try.catch 0, Catch.block, Block.statement 0, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 0, Try.catch 0, Catch.block, Block.statement 1, ExpressionStatement.expression, MethodInvocation.methodSelect, MemberSelect.expression, NewClass.identifier: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 0, Try.catch 0, Catch.block, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 1: @units.qual.UnitsBottom
insert-annotation Class.initializer 0, Block.statement 0, Try.catch 0, Catch.block, Block.statement 1, ExpressionStatement.expression, MethodInvocation.argument 0: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field fixedFlavor:
insert-annotation Variable.type: @units.qual.UnknownUnits
insert-annotation Variable.initializer: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})

field SSE:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

field NO_SSE:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

field SSE3:
insert-annotation Variable.type: @units.qual.UnitsBottom
insert-annotation Variable.initializer: @units.qual.UnitsBottom

field SSE2:
insert-annotation Variable.initializer: @units.qual.UnitsBottom
insert-annotation Variable.type: @units.qual.UnitsBottom

method archFlavor()Ljava/lang/String;:
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.elseStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.thenStatement, Block.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, Switch.case 0, Case.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.rightOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, Switch.case 1, Case.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.condition, Parenthesized.expression, Binary.leftOperand, Binary.leftOperand, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.condition, Parenthesized.expression, Binary.leftOperand: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, Switch.case 2, Case.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 3, If.elseStatement, If.thenStatement, Block.statement 0, Switch.case 3, Case.statement 0, Return.expression: @units.qual.UnitsBottom
insert-annotation Method.body, Block.statement 0, If.condition, Parenthesized.expression, Binary.rightOperand: @units.qual.UnitsBottom

method overrideArchFlavor(Ljava/lang/String;)V:
insert-annotation Method.parameter 0, Variable.type: @units.qual.UnitsInternal(unknownUnits=false, unitsBottom=false, prefixExponent=0, baseUnits={@units.qual.BaseUnit(unit="m", exponent=0), @units.qual.BaseUnit(unit="s", exponent=0)})


