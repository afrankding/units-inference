import units.qual.*;

package java.util.concurrent;

enum TimeUnit {

    @ns NANOSECONDS,
    @us MICROSECONDS,
    @ms MILLISECONDS,
    @s SECONDS,
    MINUTES,
    HOURS,
    DAYS;

    // For example, to convert 10 minutes to milliseconds, use:
    // TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)
    // TODO: enforce source value and unit are equal
    @PolyUnit long convert(@PolyUnit TimeUnit this, @UnknownUnits long sourceDuration,
            @UnknownUnits TimeUnit sourceUnit);

    // TODO: add dimensional bound on duration to be a time value
    @ns long toNanos(@UnknownUnits long duration);

    @us long toMicros(@UnknownUnits long duration);

    @ms long toMillis(@UnknownUnits long duration);

    @s long toSeconds(@UnknownUnits long duration);

    // @units.qual.UnitsInternal(unknownUnits = false, unitsBottom = false,
    // prefixExponent = 0, baseUnits = { @units.qual.BaseUnit(unit = "s", exponent =
    // 1) })

    // TODO: support M/H/D?
    long toMinutes(@UnknownUnits long duration);

    long toHours(@UnknownUnits long duration);

    long toDays(@UnknownUnits long duration);

    /**
     * Performs a timed {@link Object#wait(long, int) Object.wait} using this time
     * unit. This is a convenience method that converts timeout arguments into the
     * form required by the <tt>Object.wait</tt> method.
     *
     * <p>
     * For example, you could implement a blocking <tt>poll</tt> method (see
     * {@link BlockingQueue#poll BlockingQueue.poll}) using:
     *
     * <pre>
     *  {@code
     * synchronized Object poll(long timeout, TimeUnit unit)
     *     throws InterruptedException {
     *   while (empty) {
     *     unit.timedWait(this, timeout);
     *     ...
     *   }
     * }}
     * </pre>
     *
     * @param obj
     *            the object to wait on
     * @param timeout
     *            the maximum time to wait. If less than or equal to zero, do not
     *            wait at all.
     * @throws InterruptedException
     *             if interrupted while waiting
     */
    // TODO: enforce "this" has same unit as "timeout"
    void timedWait(@UnknownUnits TimeUnit this, Object obj, @UnknownUnits long timeout);

    /**
     * Performs a timed {@link Thread#join(long, int) Thread.join} using this time
     * unit. This is a convenience method that converts time arguments into the form
     * required by the <tt>Thread.join</tt> method.
     *
     * @param thread
     *            the thread to wait for
     * @param timeout
     *            the maximum time to wait. If less than or equal to zero, do not
     *            wait at all.
     * @throws InterruptedException
     *             if interrupted while waiting
     */
    // TODO: enforce "this" has same unit as "timeout"
    void timedJoin(@UnknownUnits TimeUnit this, Thread thread, @UnknownUnits long timeout);

    /**
     * Performs a {@link Thread#sleep(long, int) Thread.sleep} using this time unit.
     * This is a convenience method that converts time arguments into the form
     * required by the <tt>Thread.sleep</tt> method.
     *
     * @param timeout
     *            the minimum time to sleep. If less than or equal to zero, do not
     *            sleep at all.
     * @throws InterruptedException
     *             if interrupted while sleeping
     */
    // TODO: enforce "this" has same unit as "timeout"
    void sleep(@UnknownUnits TimeUnit this, @UnknownUnits long timeout);
}