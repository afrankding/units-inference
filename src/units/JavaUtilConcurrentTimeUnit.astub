import units.qual.*;

package java.util.concurrent;

public enum TimeUnit {
    NANOSECONDS {
        // public long toNanos(long d) { return d; }
        // public long toMicros(long d) { return d/(C1/C0); }
        // public long toMillis(long d) { return d/(C2/C0); }
        // public long toSeconds(long d) { return d/(C3/C0); }
        // public long toMinutes(long d) { return d/(C4/C0); }
        // public long toHours(long d) { return d/(C5/C0); }
        // public long toDays(long d) { return d/(C6/C0); }
        // public long convert(long d, TimeUnit u) { return u.toNanos(d); }
    },
    MICROSECONDS {
        // public long toNanos(long d) { return x(d, C1/C0, MAX/(C1/C0)); }
        // public long toMicros(long d) { return d; }
        // public long toMillis(long d) { return d/(C2/C1); }
        // public long toSeconds(long d) { return d/(C3/C1); }
        // public long toMinutes(long d) { return d/(C4/C1); }
        // public long toHours(long d) { return d/(C5/C1); }
        // public long toDays(long d) { return d/(C6/C1); }
        // public long convert(long d, TimeUnit u) { return u.toMicros(d); }
    },
    @ms MILLISECONDS {
        // public long toNanos(long d) { return x(d, C2/C0, MAX/(C2/C0)); }
        // public long toMicros(long d) { return x(d, C2/C1, MAX/(C2/C1)); }
        // public long toMillis(long d) { return d; }
        // public long toSeconds(long d) { return d/(C3/C2); }
        // public long toMinutes(long d) { return d/(C4/C2); }
        // public long toHours(long d) { return d/(C5/C2); }
        // public long toDays(long d) { return d/(C6/C2); }
        // public long convert(long d, TimeUnit u) { return u.toMillis(d); }
    },
    SECONDS {
        // public long toNanos(long d) { return x(d, C3/C0, MAX/(C3/C0)); }
        // public long toMicros(long d) { return x(d, C3/C1, MAX/(C3/C1)); }
        // public long toMillis(long d) { return x(d, C3/C2, MAX/(C3/C2)); }
        // public long toSeconds(long d) { return d; }
        // public long toMinutes(long d) { return d/(C4/C3); }
        // public long toHours(long d) { return d/(C5/C3); }
        // public long toDays(long d) { return d/(C6/C3); }
        // public long convert(long d, TimeUnit u) { return u.toSeconds(d); }
    },
    MINUTES {
        // public long toNanos(long d) { return x(d, C4/C0, MAX/(C4/C0)); }
        // public long toMicros(long d) { return x(d, C4/C1, MAX/(C4/C1)); }
        // public long toMillis(long d) { return x(d, C4/C2, MAX/(C4/C2)); }
        // public long toSeconds(long d) { return x(d, C4/C3, MAX/(C4/C3)); }
        // public long toMinutes(long d) { return d; }
        // public long toHours(long d) { return d/(C5/C4); }
        // public long toDays(long d) { return d/(C6/C4); }
        // public long convert(long d, TimeUnit u) { return u.toMinutes(d); }
    },
    HOURS {
        // public long toNanos(long d) { return x(d, C5/C0, MAX/(C5/C0)); }
        // public long toMicros(long d) { return x(d, C5/C1, MAX/(C5/C1)); }
        // public long toMillis(long d) { return x(d, C5/C2, MAX/(C5/C2)); }
        // public long toSeconds(long d) { return x(d, C5/C3, MAX/(C5/C3)); }
        // public long toMinutes(long d) { return x(d, C5/C4, MAX/(C5/C4)); }
        // public long toHours(long d) { return d; }
        // public long toDays(long d) { return d/(C6/C5); }
        // public long convert(long d, TimeUnit u) { return u.toHours(d); }
    },
    DAYS {
        // public long toNanos(long d) { return x(d, C6/C0, MAX/(C6/C0)); }
        // public long toMicros(long d) { return x(d, C6/C1, MAX/(C6/C1)); }
        // public long toMillis(long d) { return x(d, C6/C2, MAX/(C6/C2)); }
        // public long toSeconds(long d) { return x(d, C6/C3, MAX/(C6/C3)); }
        // public long toMinutes(long d) { return x(d, C6/C4, MAX/(C6/C4)); }
        // public long toHours(long d) { return x(d, C6/C5, MAX/(C6/C5)); }
        // public long toDays(long d) { return d; }
        // public long convert(long d, TimeUnit u) { return u.toDays(d); }
    };

    // For example, to convert 10 minutes to milliseconds, use:
    // TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)
    // TODO: enforce source value and unit are equal
    public @PolyUnit long convert(@PolyUnit TimeUnit this, @UnknownUnits long sourceDuration,
            @UnknownUnits TimeUnit sourceUnit);

    // TODO: add dimensional bound on duration to be a time value
    public @ns long toNanos(@UnknownUnits long duration);

    public @us long toMicros(@UnknownUnits long duration);

    public @ms long toMillis(@UnknownUnits long duration);

    public long @s toSeconds(@UnknownUnits long duration);

    // TODO: support M/H/D?
    public long toMinutes(@UnknownUnits long duration);

    public long toHours(@UnknownUnits long duration);

    public long toDays(@UnknownUnits long duration);

    /**
     * Performs a timed {@link Object#wait(long, int) Object.wait} using this time
     * unit. This is a convenience method that converts timeout arguments into the
     * form required by the <tt>Object.wait</tt> method.
     *
     * <p>
     * For example, you could implement a blocking <tt>poll</tt> method (see
     * {@link BlockingQueue#poll BlockingQueue.poll}) using:
     *
     * <pre>
     *  {@code
     * public synchronized Object poll(long timeout, TimeUnit unit)
     *     throws InterruptedException {
     *   while (empty) {
     *     unit.timedWait(this, timeout);
     *     ...
     *   }
     * }}
     * </pre>
     *
     * @param obj
     *            the object to wait on
     * @param timeout
     *            the maximum time to wait. If less than or equal to zero, do not
     *            wait at all.
     * @throws InterruptedException
     *             if interrupted while waiting
     */
    // TODO: enforce "this" has same unit as "timeout"
    public void timedWait(@UnknownUnits TimeUnit this, Object obj, @UnknownUnits long timeout);

    /**
     * Performs a timed {@link Thread#join(long, int) Thread.join} using this time
     * unit. This is a convenience method that converts time arguments into the form
     * required by the <tt>Thread.join</tt> method.
     *
     * @param thread
     *            the thread to wait for
     * @param timeout
     *            the maximum time to wait. If less than or equal to zero, do not
     *            wait at all.
     * @throws InterruptedException
     *             if interrupted while waiting
     */
    // TODO: enforce "this" has same unit as "timeout"
    public void timedJoin(@UnknownUnits TimeUnit this, Thread thread, @UnknownUnits long timeout);

    /**
     * Performs a {@link Thread#sleep(long, int) Thread.sleep} using this time unit.
     * This is a convenience method that converts time arguments into the form
     * required by the <tt>Thread.sleep</tt> method.
     *
     * @param timeout
     *            the minimum time to sleep. If less than or equal to zero, do not
     *            sleep at all.
     * @throws InterruptedException
     *             if interrupted while sleeping
     */
    // TODO: enforce "this" has same unit as "timeout"
    public void sleep(@UnknownUnits TimeUnit this, @UnknownUnits long timeout);
}