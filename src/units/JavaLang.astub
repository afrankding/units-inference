import units.qual.*;

package java.lang;

class System {
    static @ms long currentTimeMillis();
    static @ns long nanoTime();
}

class String implements Serializable, Comparable<String>, CharSequence {
    static final Comparator<String> CASE_INSENSITIVE_ORDER;
    String();
    String(String arg0);
    String(char[] arg0);
    String(char[] arg0, int arg1, int arg2);
    String(int[] arg0, int arg1, int arg2);
    String(byte[] arg0, int arg1, int arg2, int arg3);
    String(byte[] arg0, int arg1);
    String(byte[] arg0, int arg1, int arg2, String arg3) throws UnsupportedEncodingException;
    String(byte[] arg0, int arg1, int arg2, Charset arg3);
    String(byte[] arg0, String arg1) throws UnsupportedEncodingException;
    String(byte[] arg0, Charset arg1);
    String(byte[] arg0, int arg1, int arg2);
    String(byte[] arg0);
    String(StringBuffer arg0);
    String(StringBuilder arg0);
    int length();
    boolean isEmpty();
    char charAt(int arg0);
    int codePointAt(int arg0);
    int codePointBefore(int arg0);
    int codePointCount(int arg0, int arg1);
    int offsetByCodePoints(int arg0, int arg1);
    void getChars(int arg0, int arg1, char[] arg2, int arg3);
    void getBytes(int arg0, int arg1, byte[] arg2, int arg3);
    byte[] getBytes(String arg0) throws UnsupportedEncodingException;
    byte[] getBytes(Charset arg0);
    byte[] getBytes();
    boolean equals(Object arg0);
    boolean contentEquals(StringBuffer arg0);
    boolean contentEquals(CharSequence arg0);
    boolean equalsIgnoreCase(String arg0);
    int compareTo(String arg0);
    int compareToIgnoreCase(String arg0);
    boolean regionMatches(int arg0, String arg1, int arg2, int arg3);
    boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4);
    boolean startsWith(String arg0, int arg1);
    boolean startsWith(String arg0);
    boolean endsWith(String arg0);
    int hashCode();
    int indexOf(int arg0);
    int indexOf(int arg0, int arg1);
    int lastIndexOf(int arg0);
    int lastIndexOf(int arg0, int arg1);
    int indexOf(String arg0);
    int indexOf(String arg0, int arg1);
    int lastIndexOf(String arg0);
    int lastIndexOf(String arg0, int arg1);
    String substring(int arg0);
    String substring(int arg0, int arg1);
    CharSequence subSequence(int arg0, int arg1);
    String concat(String arg0);
    String replace(char arg0, char arg1);
    boolean matches(String arg0);
    boolean contains(CharSequence arg0);
    String replaceFirst(String arg0, String arg1);
    String replaceAll(String arg0, String arg1);
    String replace(CharSequence arg0, CharSequence arg1);
    String[] split(String arg0, int arg1);
    String[] split(String arg0);
    static String join(CharSequence arg0, CharSequence[] arg1);
    static String join(CharSequence arg0, Iterable<? extends CharSequence> arg1);
    String toLowerCase(Locale arg0);
    String toLowerCase();
    String toUpperCase(Locale arg0);
    String toUpperCase();
    String trim();
    String toString();
    char[] toCharArray();
    static String format(String arg0, @UnknownUnits Object[] arg1);
    static String format(Locale arg0, String arg1, @UnknownUnits Object[] arg2);
    static String valueOf(Object arg0);
    static String valueOf(char[] arg0);
    static String valueOf(char[] arg0, int arg1, int arg2);
    static String copyValueOf(char[] arg0, int arg1, int arg2);
    static String copyValueOf(char[] arg0);
    static String valueOf(boolean arg0);
    static String valueOf(char arg0);
    static String valueOf(@UnknownUnits int arg0);
    static String valueOf(@UnknownUnits long arg0);
    static String valueOf(@UnknownUnits float arg0);
    static String valueOf(@UnknownUnits double arg0);
    String intern();
}

package java.util;

class Objects {
    // TODO: enforce comparable constraint
    static boolean equals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    // TODO: enforce comparable constraint
    static boolean deepEquals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    static int hashCode(@UnknownUnits Object arg0);
    static int hash(@UnknownUnits Object[] arg0);
    static String toString(@UnknownUnits Object arg0);
    static String toString(@UnknownUnits Object arg0, String arg1);
    static <T extends @UnknownUnits Object> int compare(T arg0, T arg1, Comparator<? super @UnitsBottom T> arg2);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, String arg1);
    static boolean isNull(@UnknownUnits Object arg0);
    static boolean nonNull(@UnknownUnits Object arg0);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, Supplier<String> arg1);
}
