import units.qual.*;

package java.awt.geom;

class AffineTransform implements Cloneable, Serializable {
    static final int TYPE_IDENTITY;
    static final int TYPE_TRANSLATION;
    static final int TYPE_UNIFORM_SCALE;
    static final int TYPE_GENERAL_SCALE;
    static final int TYPE_MASK_SCALE;
    static final int TYPE_FLIP;
    static final int TYPE_QUADRANT_ROTATION;
    static final int TYPE_GENERAL_ROTATION;
    static final int TYPE_MASK_ROTATION;
    static final int TYPE_GENERAL_TRANSFORM;
    AffineTransform();
    AffineTransform(AffineTransform arg0);
    AffineTransform(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5);
    AffineTransform(float[] arg0);
    AffineTransform(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);
    AffineTransform(double[] arg0);
    static AffineTransform getTranslateInstance(double arg0, double arg1);
    static AffineTransform getRotateInstance(double arg0);
    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2);
    static AffineTransform getRotateInstance(double arg0, double arg1);
    static AffineTransform getRotateInstance(double arg0, double arg1, double arg2, double arg3);
    static AffineTransform getQuadrantRotateInstance(int arg0);
    static AffineTransform getQuadrantRotateInstance(int arg0, double arg1, double arg2);
    static AffineTransform getScaleInstance(double arg0, double arg1);
    static AffineTransform getShearInstance(double arg0, double arg1);
    int getType();
    double getDeterminant();
    void getMatrix(double[] arg0);
    double getScaleX();
    double getScaleY();
    double getShearX();
    double getShearY();
    double getTranslateX();
    double getTranslateY();
    void translate(double arg0, double arg1);
    void rotate(@rad double arg0);
    void rotate(@rad double arg0, double arg1, double arg2);
    void rotate(@rad double arg0, double arg1);
    void rotate(@rad double arg0, double arg1, double arg2, double arg3);
    void quadrantRotate(int arg0);
    void quadrantRotate(int arg0, double arg1, double arg2);
    void scale(double arg0, double arg1);
    void shear(double arg0, double arg1);
    void setToIdentity();
    void setToTranslation(double arg0, double arg1);
    void setToRotation(double arg0);
    void setToRotation(double arg0, double arg1, double arg2);
    void setToRotation(double arg0, double arg1);
    void setToRotation(double arg0, double arg1, double arg2, double arg3);
    void setToQuadrantRotation(int arg0);
    void setToQuadrantRotation(int arg0, double arg1, double arg2);
    void setToScale(double arg0, double arg1);
    void setToShear(double arg0, double arg1);
    void setTransform(AffineTransform arg0);
    void setTransform(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5);
    void concatenate(AffineTransform arg0);
    void preConcatenate(AffineTransform arg0);
    AffineTransform createInverse() throws NoninvertibleTransformException;
    void invert() throws NoninvertibleTransformException;
    Point2D transform(Point2D arg0, Point2D arg1);
    void transform(Point2D[] arg0, int arg1, Point2D[] arg2, int arg3, int arg4);
    void transform(float[] arg0, int arg1, float[] arg2, int arg3, int arg4);
    void transform(double[] arg0, int arg1, double[] arg2, int arg3, int arg4);
    void transform(float[] arg0, int arg1, double[] arg2, int arg3, int arg4);
    void transform(double[] arg0, int arg1, float[] arg2, int arg3, int arg4);
    Point2D inverseTransform(Point2D arg0, Point2D arg1) throws NoninvertibleTransformException;
    void inverseTransform(double[] arg0, int arg1, double[] arg2, int arg3, int arg4) throws NoninvertibleTransformException;
    Point2D deltaTransform(Point2D arg0, Point2D arg1);
    void deltaTransform(double[] arg0, int arg1, double[] arg2, int arg3, int arg4);
    Shape createTransformedShape(Shape arg0);
    String toString();
    boolean isIdentity();
    Object clone();
    int hashCode();
    boolean equals(Object arg0);
}
