import units.qual.*;

package sun.misc;

// for JLargeArray, because defaults for bytecode doesn't work in constraint
// generation

class Unsafe {
    static final int INVALID_FIELD_OFFSET;
    static final int ARRAY_BOOLEAN_BASE_OFFSET;
    static final int ARRAY_BYTE_BASE_OFFSET;
    static final int ARRAY_SHORT_BASE_OFFSET;
    static final int ARRAY_CHAR_BASE_OFFSET;
    static final int ARRAY_INT_BASE_OFFSET;
    static final int ARRAY_LONG_BASE_OFFSET;
    static final int ARRAY_FLOAT_BASE_OFFSET;
    static final int ARRAY_DOUBLE_BASE_OFFSET;
    static final int ARRAY_OBJECT_BASE_OFFSET;
    static final int ARRAY_BOOLEAN_INDEX_SCALE;
    static final int ARRAY_BYTE_INDEX_SCALE;
    static final int ARRAY_SHORT_INDEX_SCALE;
    static final int ARRAY_CHAR_INDEX_SCALE;
    static final int ARRAY_INT_INDEX_SCALE;
    static final int ARRAY_LONG_INDEX_SCALE;
    static final int ARRAY_FLOAT_INDEX_SCALE;
    static final int ARRAY_DOUBLE_INDEX_SCALE;
    static final int ARRAY_OBJECT_INDEX_SCALE;
    static final int ADDRESS_SIZE;
    static Unsafe getUnsafe();
    
    int getInt(Object arg0, long arg1);
    Class<?> defineAnonymousClass(Class<?> arg0, byte[] arg1, Object[] arg2);
    Class<?> defineClass(String arg0, byte[] arg1, int arg2, int arg3, ClassLoader arg4, ProtectionDomain arg5);
    Object allocateInstance(Class<?> arg0) throws InstantiationException;
    Object getAndSetObject(Object arg0, long arg1, Object arg2);
    Object getObject(Object arg0, int arg1);
    Object getObject(Object arg0, long arg1);
    Object getObjectVolatile(Object arg0, long arg1);
    Object staticFieldBase(Class<?> arg0);
    Object staticFieldBase(Field arg0);
    boolean compareAndSwapInt(Object arg0, long arg1, int arg2, int arg3);
    boolean compareAndSwapLong(Object arg0, long arg1, long arg2, long arg3);
    boolean compareAndSwapObject(Object arg0, long arg1, Object arg2, Object arg3);
    boolean getBoolean(Object arg0, int arg1);
    boolean getBoolean(Object arg0, long arg1);
    boolean getBooleanVolatile(Object arg0, long arg1);
    boolean shouldBeInitialized(Class<?> arg0);
    boolean tryMonitorEnter(Object arg0);
    byte getByte(Object arg0, int arg1);
    byte getByte(Object arg0, long arg1);
    @UnitsBottom byte getByte(@UnknownUnits long arg0);
    byte getByteVolatile(Object arg0, long arg1);
    char getChar(Object arg0, int arg1);
    char getChar(Object arg0, long arg1);
    char getChar(long arg0);
    char getCharVolatile(Object arg0, long arg1);
    double getDouble(Object arg0, int arg1);
    double getDouble(Object arg0, long arg1);
    @UnitsBottom double getDouble(@UnknownUnits long arg0);
    double getDoubleVolatile(Object arg0, long arg1);
    float getFloat(Object arg0, int arg1);
    float getFloat(Object arg0, long arg1);
    @UnitsBottom float getFloat(@UnknownUnits long arg0);
    float getFloatVolatile(Object arg0, long arg1);
    int addressSize();
    int arrayBaseOffset(Class<?> arg0);
    int arrayIndexScale(Class<?> arg0);
    int fieldOffset(Field arg0);
    int getAndAddInt(Object arg0, long arg1, int arg2);
    int getAndSetInt(Object arg0, long arg1, int arg2);
    int getInt(Object arg0, int arg1);
    @UnitsBottom int getInt(@UnknownUnits long arg0);
    int getIntVolatile(Object arg0, long arg1);
    int getLoadAverage(double[] arg0, int arg1);
    int pageSize();
    long allocateMemory(long arg0);
    long getAddress(long arg0);
    long getAndAddLong(Object arg0, long arg1, long arg2);
    long getAndSetLong(Object arg0, long arg1, long arg2);
    long getLong(Object arg0, int arg1);
    long getLong(Object arg0, long arg1);
    @UnitsBottom long getLong(@UnknownUnits long arg0);
    long getLongVolatile(Object arg0, long arg1);
    long objectFieldOffset(Field arg0);
    long reallocateMemory(long arg0, long arg1);
    long staticFieldOffset(Field arg0);
    short getShort(Object arg0, int arg1);
    short getShort(Object arg0, long arg1);
    @UnitsBottom short getShort(@UnknownUnits long arg0);
    short getShortVolatile(Object arg0, long arg1);
    void copyMemory(Object arg0, long arg1, Object arg2, long arg3, long arg4);
    void copyMemory(long arg0, long arg1, long arg2);
    void ensureClassInitialized(Class<?> arg0);
    void freeMemory(long arg0);
    void fullFence();
    void loadFence();
    void monitorEnter(Object arg0);
    void monitorExit(Object arg0);
    void park(boolean arg0, long arg1);
    void putAddress(long arg0, long arg1);
    void putBoolean(Object arg0, int arg1, boolean arg2);
    void putBoolean(Object arg0, long arg1, boolean arg2);
    void putBooleanVolatile(Object arg0, long arg1, boolean arg2);
    void putByte(Object arg0, int arg1, byte arg2);
    void putByte(Object arg0, long arg1, byte arg2);
    void putByte(@UnknownUnits long arg0, @UnknownUnits byte arg1);
    void putByteVolatile(Object arg0, long arg1, byte arg2);
    void putChar(Object arg0, int arg1, char arg2);
    void putChar(Object arg0, long arg1, char arg2);
    void putChar(long arg0, char arg1);
    void putCharVolatile(Object arg0, long arg1, char arg2);
    void putDouble(Object arg0, int arg1, double arg2);
    void putDouble(Object arg0, long arg1, double arg2);
    void putDouble(@UnknownUnits long arg0, @UnknownUnits double arg1);
    void putDoubleVolatile(Object arg0, long arg1, double arg2);
    void putFloat(Object arg0, int arg1, float arg2);
    void putFloat(Object arg0, long arg1, float arg2);
    void putFloat(@UnknownUnits long arg0, @UnknownUnits float arg1);
    void putFloatVolatile(Object arg0, long arg1, float arg2);
    void putInt(Object arg0, int arg1, int arg2);
    void putInt(Object arg0, long arg1, int arg2);
    void putInt(@UnknownUnits long arg0, @UnknownUnits int arg1);
    void putIntVolatile(Object arg0, long arg1, int arg2);
    void putLong(Object arg0, int arg1, long arg2);
    void putLong(Object arg0, long arg1, long arg2);
    void putLong(@UnknownUnits long arg0, @UnknownUnits long arg1);
    void putLongVolatile(Object arg0, long arg1, long arg2);
    void putObject(Object arg0, int arg1, Object arg2);
    void putObject(Object arg0, long arg1, Object arg2);
    void putObjectVolatile(Object arg0, long arg1, Object arg2);
    void putOrderedInt(Object arg0, long arg1, int arg2);
    void putOrderedLong(Object arg0, long arg1, long arg2);
    void putOrderedObject(Object arg0, long arg1, Object arg2);
    void putShort(Object arg0, int arg1, short arg2);
    void putShort(Object arg0, long arg1, short arg2);
    void putShort(@UnknownUnits long arg0, @UnknownUnits short arg1);
    void putShortVolatile(Object arg0, long arg1, short arg2);
    void setMemory(Object arg0, long arg1, long arg2, byte arg3);
    void setMemory(long arg0, long arg1, byte arg2);
    void storeFence();
    void throwException(Throwable arg0);
    void unpark(Object arg0);
}
